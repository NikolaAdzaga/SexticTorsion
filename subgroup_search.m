// Helper function to check the order of a vector in a module over Z/N Z.
function VectorHasOrderNine(v)
    if IsZero(v) then return false; end if;
    coords := Eltseq(v);
    return Gcd(coords cat [9]) eq 1;
end function;

// Set up the ring, the general linear group, and the module
Z9 := Integers(9);
G := GL(2, Z9);
//V := RSpace(R, 2);
negI := G ! -IdentityMatrix(Z9, 2);


// helper to turn [a,b] into column vector over Z9 used for multiplication
ToColVec := func< v | Vector(Z9, v) >;

// create matrix element from group element
MatFromElm := func< g | Matrix(Z9, 2, 2, Eltseq(g)) >;

// all group elements (size is manageable, 81*6*8)
G_elems := {g : g in G};

function Act(M, v)
    // v = [a,b], entries in Z9
    a := v[1]; b := v[2];
    return ToColVec([ M[1][1]*a + M[1][2]*b,
             M[2][1]*a + M[2][2]*b ]);
end function;


// enumerate candidates v of additive order 9
// v represented as [a,b] with entries in Z9

VectorsOrder9 := [];
for a in Z9 do
    for b in Z9 do
        // skip zero vector
        if a eq 0 and b eq 0 then continue; end if;
        v := [a,b];
        // use Vector(Z9,v) to check additive order
        if VectorHasOrderNine(v) then
            Append(~VectorsOrder9, ToColVec(v));
        end if;
    end for;
end for;



GroupDataFormat := recformat< label: MonStgElt, gens: SeqEnum >;
gl2tab := AssociativeArray();

gl2tab["9A0-9a"] := rec<GroupDataFormat | label:="9A0-9a", gens:=[[0,2,4,0],[1,1,4,5],[1,0,0,2]]>;
gl2tab["9B0-9a"] := rec<GroupDataFormat | label:="9B0-9a", gens:=[[1,1,0,1],[2,0,0,5],[1,0,0,2]]>;
gl2tab["9C0-9a"] := rec<GroupDataFormat | label:="9C0-9a", gens:=[[2,0,0,5],[4,2,3,4],[1,0,0,2]]>;
gl2tab["9D0-9a"] := rec<GroupDataFormat | label:="9D0-9a", gens:=[[2,0,0,5],[1,3,3,1],[0,2,4,0],[1,0,0,2]]>;
gl2tab["9E0-9a"] := rec<GroupDataFormat | label:="9E0-9a", gens:=[[1,3,0,1],[2,1,1,1],[4,2,0,5]]>;
gl2tab["9F0-9a"] := rec<GroupDataFormat | label:="9F0-9a", gens:=[[0,2,4,1],[4,3,5,4],[4,5,0,5]]>;
gl2tab["9G0-9a"] := rec<GroupDataFormat | label:="9G0-9a", gens:=[[0,4,2,3],[5,1,1,4],[5,3,0,4]]>;
gl2tab["9H0-9a"] := rec<GroupDataFormat | label:="9H0-9a", gens:=[[1,3,0,1],[5,0,3,2],[1,0,2,2]]>;
gl2tab["9H0-9b"] := rec<GroupDataFormat | label:="9H0-9b", gens:=[[1,3,0,1],[5,0,3,2],[2,1,0,1]]>;
gl2tab["9H0-9c"] := rec<GroupDataFormat | label:="9H0-9c", gens:=[[1,3,0,1],[5,0,3,2],[4,2,0,5]]>;
gl2tab["9I0-9a"] := rec<GroupDataFormat | label:="9I0-9a", gens:=[[2,1,0,5],[1,2,3,2]]>;
gl2tab["9I0-9b"] := rec<GroupDataFormat | label:="9I0-9b", gens:=[[2,1,0,5],[4,0,3,5]]>;
gl2tab["9I0-9c"] := rec<GroupDataFormat | label:="9I0-9c", gens:=[[2,2,0,5],[2,2,3,1]]>;
gl2tab["9J0-9a"] := rec<GroupDataFormat | label:="9J0-9a", gens:=[[1,3,0,1],[2,2,3,8],[1,2,0,2]]>;
gl2tab["9J0-9b"] := rec<GroupDataFormat | label:="9J0-9b", gens:=[[1,3,0,1],[2,2,3,8],[2,1,0,1]]>;
gl2tab["9J0-9c"] := rec<GroupDataFormat | label:="9J0-9c", gens:=[[1,3,0,1],[5,2,3,5],[4,0,0,5]]>;


// ---- Main Loop ----

for label in Keys(gl2tab) do
    data := gl2tab[label];
    printf "\n============================================================\n";
    printf "===== Analyzing Group H: %o =====\n", data`label;
    print "============================================================\n";

    H := sub<G | [G ! g : g in data`gens]>;
    found_match_for_H := false;

    // Iterate through all subgroups K of H
    for K_rec in Subgroups(H) do
        K := K_rec`subgroup;

        // Check if H is generated by K and -I
        if H eq sub<H | Generators(K) join {negI}> then
            
            // Iterate through vectors v and compute their stabilizers ---
            
            // Iterate through all vectors in the module V = (Z/9Z)^2
            for v in VectorsOrder9 do                    
                    // Compute the stabilizer subgroup of v within H
                    Stab_v := Stabilizer(H, v);
                    
                    // Check if this stabilizer has index 6
                    if Index(H, Stab_v) eq 6 then
                        found_match_for_H := true;
                        printf "--> For H=%o, found a vector v of order 9 whose stabilizer in H has index 6.\n", label;
                        printf "    K is generated by: %o\n", [MatFromElm(Eltseq(g)) : g in Generators(K)];
                        printf "    The vector is v = %o\n", v;
                        printf "    The stabilizer Stab_K(v) is generated by: %o\n\n", [MatFromElm(Eltseq(g)) : g in Generators(Stab_v)];
			found_match_for_H := true;
			break;
                    end if;
            end for; // End loop over vectors v
        end if;
	if found_match_for_H then break; end if;
    end for; // End loop over subgroups K of H

    if not found_match_for_H then
        printf "No vectors matching the criteria were found for H = %o.\n", label;
    end if;

end for;

